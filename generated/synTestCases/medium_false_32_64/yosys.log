
-- Parsing `../../../syn/DynamicFifo.yo.tcl' using frontend `tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: DynamicFifo.sv
Parsing SystemVerilog input from `DynamicFifo.sv' to AST representation.
Generating RTLIL representation for module `\DynamicFifo'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \DynamicFifo

2.2. Analyzing design hierarchy..
Top module:  \DynamicFifo
Removed 0 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \DynamicFifo

3.1.2. Analyzing design hierarchy..
Top module:  \DynamicFifo
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$DynamicFifo.sv:226$6 in module DynamicFifo.
Marked 1 switch rules as full_case in process $proc$DynamicFifo.sv:93$3 in module DynamicFifo.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
     1/67: $0\count[6:0]
     2/67: $0\head[6:0]
     3/67: $0\tail[6:0]
     4/67: $0\fifoMemory_63[31:0]
     5/67: $0\fifoMemory_62[31:0]
     6/67: $0\fifoMemory_61[31:0]
     7/67: $0\fifoMemory_60[31:0]
     8/67: $0\fifoMemory_59[31:0]
     9/67: $0\fifoMemory_58[31:0]
    10/67: $0\fifoMemory_57[31:0]
    11/67: $0\fifoMemory_56[31:0]
    12/67: $0\fifoMemory_55[31:0]
    13/67: $0\fifoMemory_54[31:0]
    14/67: $0\fifoMemory_53[31:0]
    15/67: $0\fifoMemory_52[31:0]
    16/67: $0\fifoMemory_51[31:0]
    17/67: $0\fifoMemory_50[31:0]
    18/67: $0\fifoMemory_49[31:0]
    19/67: $0\fifoMemory_48[31:0]
    20/67: $0\fifoMemory_47[31:0]
    21/67: $0\fifoMemory_46[31:0]
    22/67: $0\fifoMemory_45[31:0]
    23/67: $0\fifoMemory_44[31:0]
    24/67: $0\fifoMemory_43[31:0]
    25/67: $0\fifoMemory_42[31:0]
    26/67: $0\fifoMemory_41[31:0]
    27/67: $0\fifoMemory_40[31:0]
    28/67: $0\fifoMemory_39[31:0]
    29/67: $0\fifoMemory_38[31:0]
    30/67: $0\fifoMemory_37[31:0]
    31/67: $0\fifoMemory_36[31:0]
    32/67: $0\fifoMemory_35[31:0]
    33/67: $0\fifoMemory_34[31:0]
    34/67: $0\fifoMemory_33[31:0]
    35/67: $0\fifoMemory_32[31:0]
    36/67: $0\fifoMemory_31[31:0]
    37/67: $0\fifoMemory_30[31:0]
    38/67: $0\fifoMemory_29[31:0]
    39/67: $0\fifoMemory_28[31:0]
    40/67: $0\fifoMemory_27[31:0]
    41/67: $0\fifoMemory_26[31:0]
    42/67: $0\fifoMemory_25[31:0]
    43/67: $0\fifoMemory_24[31:0]
    44/67: $0\fifoMemory_23[31:0]
    45/67: $0\fifoMemory_22[31:0]
    46/67: $0\fifoMemory_21[31:0]
    47/67: $0\fifoMemory_20[31:0]
    48/67: $0\fifoMemory_19[31:0]
    49/67: $0\fifoMemory_18[31:0]
    50/67: $0\fifoMemory_17[31:0]
    51/67: $0\fifoMemory_16[31:0]
    52/67: $0\fifoMemory_15[31:0]
    53/67: $0\fifoMemory_14[31:0]
    54/67: $0\fifoMemory_13[31:0]
    55/67: $0\fifoMemory_12[31:0]
    56/67: $0\fifoMemory_11[31:0]
    57/67: $0\fifoMemory_10[31:0]
    58/67: $0\fifoMemory_9[31:0]
    59/67: $0\fifoMemory_8[31:0]
    60/67: $0\fifoMemory_7[31:0]
    61/67: $0\fifoMemory_6[31:0]
    62/67: $0\fifoMemory_5[31:0]
    63/67: $0\fifoMemory_4[31:0]
    64/67: $0\fifoMemory_3[31:0]
    65/67: $0\fifoMemory_2[31:0]
    66/67: $0\fifoMemory_1[31:0]
    67/67: $0\fifoMemory_0[31:0]
Creating decoders for process `\DynamicFifo.$proc$DynamicFifo.sv:93$3'.
     1/2: $1\casez_tmp[31:0]
     2/2: $0\casez_tmp[31:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\DynamicFifo.\casez_tmp' from process `\DynamicFifo.$proc$DynamicFifo.sv:93$3'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\DynamicFifo.\fifoMemory_0' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$358' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_1' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$359' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_2' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$360' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_3' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$361' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_4' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$362' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_5' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$363' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_6' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$364' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_7' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$365' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_8' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$366' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_9' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$367' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_10' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$368' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_11' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$369' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_12' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$370' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_13' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$371' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_14' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$372' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_15' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$373' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_16' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$374' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_17' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$375' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_18' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$376' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_19' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$377' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_20' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$378' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_21' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$379' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_22' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$380' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_23' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$381' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_24' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$382' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_25' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$383' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_26' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$384' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_27' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$385' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_28' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$386' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_29' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$387' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_30' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$388' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_31' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$389' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_32' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$390' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_33' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$391' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_34' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$392' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_35' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$393' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_36' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$394' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_37' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$395' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_38' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$396' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_39' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$397' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_40' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$398' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_41' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$399' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_42' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$400' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_43' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$401' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_44' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$402' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_45' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$403' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_46' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$404' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_47' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$405' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_48' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$406' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_49' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$407' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_50' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$408' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_51' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$409' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_52' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$410' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_53' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$411' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_54' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$412' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_55' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$413' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_56' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$414' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_57' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$415' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_58' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$416' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_59' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$417' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_60' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$418' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_61' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$419' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_62' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$420' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_63' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$421' with positive edge clock.
Creating register for signal `\DynamicFifo.\tail' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$422' with positive edge clock.
Creating register for signal `\DynamicFifo.\head' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$423' with positive edge clock.
Creating register for signal `\DynamicFifo.\count' using process `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
  created $dff cell `$procdff$424' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 70 empty switches in `\DynamicFifo.$proc$DynamicFifo.sv:226$6'.
Removing empty process `DynamicFifo.$proc$DynamicFifo.sv:226$6'.
Found and cleaned up 1 empty switch in `\DynamicFifo.$proc$DynamicFifo.sv:93$3'.
Removing empty process `DynamicFifo.$proc$DynamicFifo.sv:93$3'.
Cleaned up 71 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.
<suppressed ~4 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 1 unused cells and 148 unused wires.
<suppressed ~2 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module DynamicFifo..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DynamicFifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~68 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DynamicFifo.
    New input vector for $reduce_and cell $reduce_and$DynamicFifo.sv:353$133: { \head [0] \head [1] \head [2] \head [3] \head [4] \head [5] }
  Optimizing cells in module \DynamicFifo.
Performed a total of 1 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DynamicFifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~68 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DynamicFifo.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 5 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:229$9 ($eq).
Removed top 4 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:231$11 ($eq).
Removed top 4 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:233$13 ($eq).
Removed top 3 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:235$15 ($eq).
Removed top 3 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:237$17 ($eq).
Removed top 3 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:239$19 ($eq).
Removed top 3 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:241$21 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:243$23 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:245$25 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:247$27 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:249$29 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:251$31 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:253$33 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:255$35 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:257$37 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:259$39 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:261$41 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:263$43 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:265$45 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:267$47 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:269$49 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:271$51 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:273$53 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:275$55 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:277$57 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:279$59 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:281$61 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:283$63 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:285$65 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:287$67 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:289$69 ($eq).
Removed top 6 bits (of 7) from port B of cell DynamicFifo.$add$DynamicFifo.sv:362$137 ($add).
Removed top 6 bits (of 7) from port B of cell DynamicFifo.$add$DynamicFifo.sv:364$138 ($add).
Removed top 6 bits (of 7) from port B of cell DynamicFifo.$sub$DynamicFifo.sv:367$141 ($sub).
Removed top 6 bits (of 7) from port B of cell DynamicFifo.$add$DynamicFifo.sv:369$142 ($add).
Removed top 1 bits (of 7) from port B of cell DynamicFifo.$le$DynamicFifo.sv:376$143 ($le).
Removed top 1 bits (of 7) from port B of cell DynamicFifo.$ge$DynamicFifo.sv:377$144 ($ge).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$326_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$327_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$328_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$329_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$330_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$331_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$332_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$333_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$334_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$335_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$336_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$337_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$338_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$339_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$340_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell DynamicFifo.$procmux$341_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$procmux$342_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$procmux$343_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$procmux$344_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$procmux$345_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$procmux$346_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$procmux$347_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$procmux$348_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell DynamicFifo.$procmux$349_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell DynamicFifo.$procmux$350_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell DynamicFifo.$procmux$351_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell DynamicFifo.$procmux$352_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell DynamicFifo.$procmux$353_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell DynamicFifo.$procmux$354_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell DynamicFifo.$procmux$355_CMP0 ($eq).
Removed top 5 bits (of 6) from port B of cell DynamicFifo.$procmux$356_CMP0 ($eq).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~1044 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module DynamicFifo:
  creating $macc model for $add$DynamicFifo.sv:362$137 ($add).
  creating $macc model for $add$DynamicFifo.sv:364$138 ($add).
  creating $macc model for $add$DynamicFifo.sv:369$142 ($add).
  creating $macc model for $sub$DynamicFifo.sv:367$141 ($sub).
  creating $alu model for $macc $sub$DynamicFifo.sv:367$141.
  creating $alu model for $macc $add$DynamicFifo.sv:369$142.
  creating $alu model for $macc $add$DynamicFifo.sv:364$138.
  creating $alu model for $macc $add$DynamicFifo.sv:362$137.
  creating $alu model for $ge$DynamicFifo.sv:377$144 ($ge): new $alu
  creating $alu model for $le$DynamicFifo.sv:376$143 ($le): new $alu
  creating $alu cell for $le$DynamicFifo.sv:376$143: $auto$alumacc.cc:474:replace_alu$427
  creating $alu cell for $ge$DynamicFifo.sv:377$144: $auto$alumacc.cc:474:replace_alu$440
  creating $alu cell for $add$DynamicFifo.sv:362$137: $auto$alumacc.cc:474:replace_alu$449
  creating $alu cell for $add$DynamicFifo.sv:364$138: $auto$alumacc.cc:474:replace_alu$452
  creating $alu cell for $add$DynamicFifo.sv:369$142: $auto$alumacc.cc:474:replace_alu$455
  creating $alu cell for $sub$DynamicFifo.sv:367$141: $auto$alumacc.cc:474:replace_alu$458
  created 6 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DynamicFifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~68 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DynamicFifo.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$438: { $auto$rtlil.cc:1832:Not$437 $auto$rtlil.cc:1835:ReduceAnd$431 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$447: { $auto$rtlil.cc:1832:Not$444 $auto$rtlil.cc:1835:ReduceAnd$446 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$430: { $auto$alumacc.cc:490:replace_alu$428 [0] $auto$alumacc.cc:490:replace_alu$428 [1] $auto$alumacc.cc:490:replace_alu$428 [2] $auto$alumacc.cc:490:replace_alu$428 [3] $auto$alumacc.cc:490:replace_alu$428 [4] $auto$alumacc.cc:490:replace_alu$428 [5] $auto$alumacc.cc:490:replace_alu$428 [6] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$445: { $auto$alumacc.cc:490:replace_alu$441 [0] $auto$alumacc.cc:490:replace_alu$441 [1] $auto$alumacc.cc:490:replace_alu$441 [2] $auto$alumacc.cc:490:replace_alu$441 [3] $auto$alumacc.cc:490:replace_alu$441 [4] $auto$alumacc.cc:490:replace_alu$441 [5] $auto$alumacc.cc:490:replace_alu$441 [6] }
  Optimizing cells in module \DynamicFifo.
Performed a total of 4 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DynamicFifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~68 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DynamicFifo.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DynamicFifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~68 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DynamicFifo.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=1\Y_WIDTH=7 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=63 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=7 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~777 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.
<suppressed ~531 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
<suppressed ~2499 debug messages>
Removed a total of 833 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 52 unused cells and 817 unused wires.
<suppressed ~53 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\DynamicFifo' to `<abc-temp-dir>/input.blif'..
Extracted 6733 gates and 8849 wires to a netlist network with 2114 inputs and 2103 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        5
ABC RESULTS:            ANDNOT cells:      137
ABC RESULTS:              AOI3 cells:        7
ABC RESULTS:              AOI4 cells:       32
ABC RESULTS:               MUX cells:     2110
ABC RESULTS:              NAND cells:       39
ABC RESULTS:               NOR cells:        9
ABC RESULTS:               NOT cells:     1938
ABC RESULTS:              OAI3 cells:        7
ABC RESULTS:              OAI4 cells:      961
ABC RESULTS:                OR cells:     1164
ABC RESULTS:             ORNOT cells:       54
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:               XOR cells:       30
ABC RESULTS:        internal signals:     4632
ABC RESULTS:           input signals:     2114
ABC RESULTS:          output signals:     2103
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.
<suppressed ~12 debug messages>

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 1 unused cells and 4833 unused wires.
<suppressed ~3 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \DynamicFifo

3.25.2. Analyzing design hierarchy..
Top module:  \DynamicFifo
Removed 0 unused modules.

3.26. Printing statistics.

=== DynamicFifo ===

   Number of wires:               4547
   Number of wire bits:           8726
   Number of public wires:          88
   Number of public wire bits:    2265
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               8562
     $_ANDNOT_                     137
     $_AND_                          5
     $_AOI3_                         7
     $_AOI4_                        32
     $_DFF_P_                     2067
     $_MUX_                       2110
     $_NAND_                        39
     $_NOR_                          8
     $_NOT_                       1937
     $_OAI3_                         7
     $_OAI4_                       961
     $_ORNOT_                       54
     $_OR_                        1164
     $_XNOR_                         4
     $_XOR_                         30

3.27. Executing CHECK pass (checking for obvious problems).
checking module DynamicFifo..
found and reported 0 problems.

4. Executing FLATTEN pass (flatten design).
No more expansions possible.

5. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  create mapping for $_DFF_PP0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_PP1_ from mapping for $_DFF_PN1_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFF_N_ from mapping for $_DFF_P_.
  create mapping for $_DFF_NN0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_NP0_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NN1_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NP1_ from mapping for $_DFF_NN1_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  final dff cell mappings:
    DFF_X1 _DFF_N_ (.CK(~C), .D( D), .Q( Q), .QN(~Q));
    DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    DFFR_X1 _DFF_NN0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFR_X1 _DFF_NN1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN( R));
    DFFR_X1 _DFF_NP0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFR_X1 _DFF_NP1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN(~R));
    DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    DFFR_X1 _DFF_PP0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFS_X1 _DFF_PP1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN(~R));
    DFFRS_X1 _DFFSR_NNN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_NNP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_NPN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_NPP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
    DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_PNP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_PPN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_PPP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
Mapping DFF cells in module `\DynamicFifo':
  mapped 2067 $_DFF_P_ cells to \DFF_X1 cells.

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\DynamicFifo' to `<abc-temp-dir>/input.blif'..
Extracted 6495 gates and 10544 wires to a netlist network with 4049 inputs and 2103 outputs.

6.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/system76/drive/projects/chiselWare/dynamicfifo/generated/synTestCases/medium_false_32_64/../../../syn/stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "WELLTAP_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/home/system76/drive/projects/chiselWare/dynamicfifo/generated/synTestCases/medium_false_32_64/../../../syn/stdcells.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 10 dont_use).  Time =     0.06 sec
ABC: Memory =    8.88 MB. Time =     0.06 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X1 cells:       25
ABC RESULTS:           AND3_X1 cells:        9
ABC RESULTS:           AND4_X1 cells:       18
ABC RESULTS:         AOI211_X1 cells:       16
ABC RESULTS:          AOI21_X1 cells:       23
ABC RESULTS:         AOI221_X1 cells:        6
ABC RESULTS:          AOI22_X1 cells:       14
ABC RESULTS:            INV_X1 cells:       41
ABC RESULTS:           MUX2_X1 cells:     2049
ABC RESULTS:          NAND2_X1 cells:       99
ABC RESULTS:          NAND3_X1 cells:       32
ABC RESULTS:          NAND4_X1 cells:       63
ABC RESULTS:           NOR2_X1 cells:      150
ABC RESULTS:           NOR3_X1 cells:       84
ABC RESULTS:           NOR4_X1 cells:      145
ABC RESULTS:          OAI21_X1 cells:       51
ABC RESULTS:         OAI221_X1 cells:       36
ABC RESULTS:         OAI222_X1 cells:      253
ABC RESULTS:          OAI22_X1 cells:      497
ABC RESULTS:          OAI33_X1 cells:        3
ABC RESULTS:            OR2_X1 cells:       42
ABC RESULTS:            OR3_X1 cells:       33
ABC RESULTS:            OR4_X1 cells:       24
ABC RESULTS:          XNOR2_X1 cells:        7
ABC RESULTS:           XOR2_X1 cells:        6
ABC RESULTS:        internal signals:     4392
ABC RESULTS:           input signals:     4049
ABC RESULTS:          output signals:     2103
Removing temp directory.

7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 0 unused cells and 12484 unused wires.
<suppressed ~6 debug messages>

8. Executing Verilog backend.
Dumping module `\DynamicFifo'.

9. Printing statistics.

=== DynamicFifo ===

   Number of wires:               3840
   Number of wire bits:           7976
   Number of public wires:          83
   Number of public wire bits:    2217
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5793
     AND2_X1                        25
     AND3_X1                         9
     AND4_X1                        18
     AOI211_X1                      16
     AOI21_X1                       23
     AOI221_X1                       6
     AOI22_X1                       14
     DFF_X1                       2067
     INV_X1                         41
     MUX2_X1                      2049
     NAND2_X1                       99
     NAND3_X1                       32
     NAND4_X1                       63
     NOR2_X1                       150
     NOR3_X1                        84
     NOR4_X1                       145
     OAI21_X1                       51
     OAI221_X1                      36
     OAI222_X1                     253
     OAI22_X1                      497
     OAI33_X1                        3
     OR2_X1                         42
     OR3_X1                         33
     OR4_X1                         24
     XNOR2_X1                        7
     XOR2_X1                         6

   Chip area for module '\DynamicFifo': 15388.366000

Warnings: 8 unique messages, 72 total
End of script. Logfile hash: 3e64378873
CPU: user 3.56s system 0.04s, MEM: 60.34 MB total, 49.00 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 19% 13x opt_merge (0 sec), 17% 17x opt_clean (0 sec), ...
