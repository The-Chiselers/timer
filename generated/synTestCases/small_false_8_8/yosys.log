
-- Parsing `../../../syn/DynamicFifo.yo.tcl' using frontend `tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: DynamicFifo.sv
Parsing SystemVerilog input from `DynamicFifo.sv' to AST representation.
Generating RTLIL representation for module `\DynamicFifo'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \DynamicFifo

2.2. Analyzing design hierarchy..
Top module:  \DynamicFifo
Removed 0 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \DynamicFifo

3.1.2. Analyzing design hierarchy..
Top module:  \DynamicFifo
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$DynamicFifo.sv:58$6 in module DynamicFifo.
Marked 1 switch rules as full_case in process $proc$DynamicFifo.sv:37$3 in module DynamicFifo.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\DynamicFifo.$proc$DynamicFifo.sv:58$6'.
     1/11: $0\count[3:0]
     2/11: $0\head[3:0]
     3/11: $0\tail[3:0]
     4/11: $0\fifoMemory_7[7:0]
     5/11: $0\fifoMemory_6[7:0]
     6/11: $0\fifoMemory_5[7:0]
     7/11: $0\fifoMemory_4[7:0]
     8/11: $0\fifoMemory_3[7:0]
     9/11: $0\fifoMemory_2[7:0]
    10/11: $0\fifoMemory_1[7:0]
    11/11: $0\fifoMemory_0[7:0]
Creating decoders for process `\DynamicFifo.$proc$DynamicFifo.sv:37$3'.
     1/2: $1\casez_tmp[7:0]
     2/2: $0\casez_tmp[7:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\DynamicFifo.\casez_tmp' from process `\DynamicFifo.$proc$DynamicFifo.sv:37$3'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\DynamicFifo.\fifoMemory_0' using process `\DynamicFifo.$proc$DynamicFifo.sv:58$6'.
  created $dff cell `$procdff$78' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_1' using process `\DynamicFifo.$proc$DynamicFifo.sv:58$6'.
  created $dff cell `$procdff$79' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_2' using process `\DynamicFifo.$proc$DynamicFifo.sv:58$6'.
  created $dff cell `$procdff$80' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_3' using process `\DynamicFifo.$proc$DynamicFifo.sv:58$6'.
  created $dff cell `$procdff$81' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_4' using process `\DynamicFifo.$proc$DynamicFifo.sv:58$6'.
  created $dff cell `$procdff$82' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_5' using process `\DynamicFifo.$proc$DynamicFifo.sv:58$6'.
  created $dff cell `$procdff$83' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_6' using process `\DynamicFifo.$proc$DynamicFifo.sv:58$6'.
  created $dff cell `$procdff$84' with positive edge clock.
Creating register for signal `\DynamicFifo.\fifoMemory_7' using process `\DynamicFifo.$proc$DynamicFifo.sv:58$6'.
  created $dff cell `$procdff$85' with positive edge clock.
Creating register for signal `\DynamicFifo.\tail' using process `\DynamicFifo.$proc$DynamicFifo.sv:58$6'.
  created $dff cell `$procdff$86' with positive edge clock.
Creating register for signal `\DynamicFifo.\head' using process `\DynamicFifo.$proc$DynamicFifo.sv:58$6'.
  created $dff cell `$procdff$87' with positive edge clock.
Creating register for signal `\DynamicFifo.\count' using process `\DynamicFifo.$proc$DynamicFifo.sv:58$6'.
  created $dff cell `$procdff$88' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 14 empty switches in `\DynamicFifo.$proc$DynamicFifo.sv:58$6'.
Removing empty process `DynamicFifo.$proc$DynamicFifo.sv:58$6'.
Found and cleaned up 1 empty switch in `\DynamicFifo.$proc$DynamicFifo.sv:37$3'.
Removing empty process `DynamicFifo.$proc$DynamicFifo.sv:37$3'.
Cleaned up 15 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.
<suppressed ~4 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 1 unused cells and 36 unused wires.
<suppressed ~2 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module DynamicFifo..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DynamicFifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DynamicFifo.
    New input vector for $reduce_and cell $reduce_and$DynamicFifo.sv:73$21: { \head [0] \head [1] \head [2] }
  Optimizing cells in module \DynamicFifo.
Performed a total of 1 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DynamicFifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DynamicFifo.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:61$9 ($eq).
Removed top 1 bits (of 3) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:63$11 ($eq).
Removed top 1 bits (of 3) from port B of cell DynamicFifo.$eq$DynamicFifo.sv:65$13 ($eq).
Removed top 3 bits (of 4) from port B of cell DynamicFifo.$add$DynamicFifo.sv:82$25 ($add).
Removed top 3 bits (of 4) from port B of cell DynamicFifo.$add$DynamicFifo.sv:84$26 ($add).
Removed top 3 bits (of 4) from port B of cell DynamicFifo.$sub$DynamicFifo.sv:87$29 ($sub).
Removed top 3 bits (of 4) from port B of cell DynamicFifo.$add$DynamicFifo.sv:89$30 ($add).
Removed top 1 bits (of 4) from port B of cell DynamicFifo.$le$DynamicFifo.sv:96$31 ($le).
Removed top 1 bits (of 4) from port B of cell DynamicFifo.$ge$DynamicFifo.sv:97$32 ($ge).
Removed top 1 bits (of 3) from port B of cell DynamicFifo.$procmux$74_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell DynamicFifo.$procmux$75_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell DynamicFifo.$procmux$76_CMP0 ($eq).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~148 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module DynamicFifo:
  creating $macc model for $add$DynamicFifo.sv:82$25 ($add).
  creating $macc model for $add$DynamicFifo.sv:84$26 ($add).
  creating $macc model for $add$DynamicFifo.sv:89$30 ($add).
  creating $macc model for $sub$DynamicFifo.sv:87$29 ($sub).
  creating $alu model for $macc $sub$DynamicFifo.sv:87$29.
  creating $alu model for $macc $add$DynamicFifo.sv:89$30.
  creating $alu model for $macc $add$DynamicFifo.sv:84$26.
  creating $alu model for $macc $add$DynamicFifo.sv:82$25.
  creating $alu model for $ge$DynamicFifo.sv:97$32 ($ge): new $alu
  creating $alu model for $le$DynamicFifo.sv:96$31 ($le): new $alu
  creating $alu cell for $le$DynamicFifo.sv:96$31: $auto$alumacc.cc:474:replace_alu$91
  creating $alu cell for $ge$DynamicFifo.sv:97$32: $auto$alumacc.cc:474:replace_alu$104
  creating $alu cell for $add$DynamicFifo.sv:82$25: $auto$alumacc.cc:474:replace_alu$113
  creating $alu cell for $add$DynamicFifo.sv:84$26: $auto$alumacc.cc:474:replace_alu$116
  creating $alu cell for $add$DynamicFifo.sv:89$30: $auto$alumacc.cc:474:replace_alu$119
  creating $alu cell for $sub$DynamicFifo.sv:87$29: $auto$alumacc.cc:474:replace_alu$122
  created 6 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DynamicFifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DynamicFifo.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$111: { $auto$rtlil.cc:1832:Not$108 $auto$rtlil.cc:1835:ReduceAnd$110 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$94: { $auto$alumacc.cc:490:replace_alu$92 [0] $auto$alumacc.cc:490:replace_alu$92 [1] $auto$alumacc.cc:490:replace_alu$92 [2] $auto$alumacc.cc:490:replace_alu$92 [3] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$109: { $auto$alumacc.cc:490:replace_alu$105 [0] $auto$alumacc.cc:490:replace_alu$105 [1] $auto$alumacc.cc:490:replace_alu$105 [2] $auto$alumacc.cc:490:replace_alu$105 [3] }
  Optimizing cells in module \DynamicFifo.
Performed a total of 3 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DynamicFifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DynamicFifo.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DynamicFifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DynamicFifo.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=7 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~354 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.
<suppressed ~117 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
<suppressed ~99 debug messages>
Removed a total of 33 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 41 unused cells and 257 unused wires.
<suppressed ~42 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\DynamicFifo' to `<abc-temp-dir>/input.blif'..
Extracted 334 gates and 427 wires to a netlist network with 91 inputs and 86 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        4
ABC RESULTS:            ANDNOT cells:       39
ABC RESULTS:              AOI3 cells:        3
ABC RESULTS:              AOI4 cells:        8
ABC RESULTS:               MUX cells:       87
ABC RESULTS:              NAND cells:        9
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:       42
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:              OAI4 cells:       18
ABC RESULTS:                OR cells:       35
ABC RESULTS:             ORNOT cells:       17
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:               XOR cells:       10
ABC RESULTS:        internal signals:      250
ABC RESULTS:           input signals:       91
ABC RESULTS:          output signals:       86
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.
<suppressed ~6 debug messages>

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 1 unused cells and 294 unused wires.
<suppressed ~3 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \DynamicFifo

3.25.2. Analyzing design hierarchy..
Top module:  \DynamicFifo
Removed 0 unused modules.

3.26. Printing statistics.

=== DynamicFifo ===

   Number of wires:                236
   Number of wire bits:            409
   Number of public wires:          32
   Number of public wire bits:     140
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                353
     $_ANDNOT_                      39
     $_AND_                          4
     $_AOI3_                         3
     $_AOI4_                         8
     $_DFF_P_                       74
     $_MUX_                         87
     $_NAND_                         9
     $_NOR_                          1
     $_NOT_                         41
     $_OAI3_                         1
     $_OAI4_                        18
     $_ORNOT_                       17
     $_OR_                          35
     $_XNOR_                         6
     $_XOR_                         10

3.27. Executing CHECK pass (checking for obvious problems).
checking module DynamicFifo..
found and reported 0 problems.

4. Executing FLATTEN pass (flatten design).
No more expansions possible.

5. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  create mapping for $_DFF_PP0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_PP1_ from mapping for $_DFF_PN1_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFF_N_ from mapping for $_DFF_P_.
  create mapping for $_DFF_NN0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_NP0_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NN1_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NP1_ from mapping for $_DFF_NN1_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  final dff cell mappings:
    DFF_X1 _DFF_N_ (.CK(~C), .D( D), .Q( Q), .QN(~Q));
    DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    DFFR_X1 _DFF_NN0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFR_X1 _DFF_NN1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN( R));
    DFFR_X1 _DFF_NP0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFR_X1 _DFF_NP1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN(~R));
    DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    DFFR_X1 _DFF_PP0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFS_X1 _DFF_PP1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN(~R));
    DFFRS_X1 _DFFSR_NNN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_NNP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_NPN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_NPP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
    DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_PNP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_PPN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_PPP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
Mapping DFF cells in module `\DynamicFifo':
  mapped 74 $_DFF_P_ cells to \DFF_X1 cells.

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\DynamicFifo' to `<abc-temp-dir>/input.blif'..
Extracted 279 gates and 409 wires to a netlist network with 130 inputs and 86 outputs.

6.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/system76/drive/projects/chiselWare/dynamicfifo/generated/synTestCases/small_false_8_8/../../../syn/stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "WELLTAP_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/home/system76/drive/projects/chiselWare/dynamicfifo/generated/synTestCases/small_false_8_8/../../../syn/stdcells.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 10 dont_use).  Time =     0.06 sec
ABC: Memory =    8.88 MB. Time =     0.06 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X1 cells:        1
ABC RESULTS:           AND3_X1 cells:        2
ABC RESULTS:         AOI211_X1 cells:        4
ABC RESULTS:          AOI21_X1 cells:       11
ABC RESULTS:         AOI221_X1 cells:        3
ABC RESULTS:          AOI22_X1 cells:       11
ABC RESULTS:            INV_X1 cells:       30
ABC RESULTS:           MUX2_X1 cells:       64
ABC RESULTS:          NAND2_X1 cells:        9
ABC RESULTS:          NAND3_X1 cells:        9
ABC RESULTS:           NOR2_X1 cells:       20
ABC RESULTS:           NOR3_X1 cells:       14
ABC RESULTS:           NOR4_X1 cells:        5
ABC RESULTS:         OAI211_X1 cells:        1
ABC RESULTS:          OAI21_X1 cells:       12
ABC RESULTS:         OAI221_X1 cells:        2
ABC RESULTS:          OAI22_X1 cells:       15
ABC RESULTS:            OR2_X1 cells:        2
ABC RESULTS:            OR3_X1 cells:        1
ABC RESULTS:            OR4_X1 cells:        2
ABC RESULTS:          XNOR2_X1 cells:        2
ABC RESULTS:           XOR2_X1 cells:        2
ABC RESULTS:        internal signals:      193
ABC RESULTS:           input signals:      130
ABC RESULTS:          output signals:       86
Removing temp directory.

7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 0 unused cells and 453 unused wires.
<suppressed ~6 debug messages>

8. Executing Verilog backend.
Dumping module `\DynamicFifo'.

9. Printing statistics.

=== DynamicFifo ===

   Number of wires:                248
   Number of wire bits:            408
   Number of public wires:          27
   Number of public wire bits:     122
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                296
     AND2_X1                         1
     AND3_X1                         2
     AOI211_X1                       4
     AOI21_X1                       11
     AOI221_X1                       3
     AOI22_X1                       11
     DFF_X1                         74
     INV_X1                         30
     MUX2_X1                        64
     NAND2_X1                        9
     NAND3_X1                        9
     NOR2_X1                        20
     NOR3_X1                        14
     NOR4_X1                         5
     OAI211_X1                       1
     OAI21_X1                       12
     OAI221_X1                       2
     OAI22_X1                       15
     OR2_X1                          2
     OR3_X1                          1
     OR4_X1                          2
     XNOR2_X1                        2
     XOR2_X1                         2

   Chip area for module '\DynamicFifo': 614.460000

Warnings: 8 unique messages, 72 total
End of script. Logfile hash: daf7027baa
CPU: user 0.38s system 0.02s, MEM: 40.48 MB total, 30.25 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 20% 1x dfflibmap (0 sec), 18% 2x stat (0 sec), ...
