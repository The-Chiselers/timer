// Generated by CIRCT firtool-1.47.0
module DynamicFifo(
  input        clock,
               reset,
               io_push,
               io_pop,
  input  [7:0] io_dataIn,
  input  [2:0] io_almostEmptyLevel,
               io_almostFullLevel,
  input  [7:0] io_ramDataOut,
  output [7:0] io_dataOut,
  output       io_empty,
               io_full,
               io_almostEmpty,
               io_almostFull,
               io_ramWriteEnable,
  output [2:0] io_ramWriteAddress,
  output [7:0] io_ramDataIn,
  output       io_ramReadEnable,
  output [2:0] io_ramReadAddress
);

  reg  [7:0] casez_tmp;
  reg  [7:0] fifoMemory_0;
  reg  [7:0] fifoMemory_1;
  reg  [7:0] fifoMemory_2;
  reg  [7:0] fifoMemory_3;
  reg  [7:0] fifoMemory_4;
  reg  [7:0] fifoMemory_5;
  reg  [7:0] fifoMemory_6;
  reg  [7:0] fifoMemory_7;
  reg  [3:0] tail;
  reg  [3:0] head;
  reg  [3:0] count;
  wire       _io_empty_output = count == 4'h0;
  wire       _io_full_output = count == 4'h8;
  always_comb begin
    casez (tail[2:0])
      3'b000:
        casez_tmp = fifoMemory_0;
      3'b001:
        casez_tmp = fifoMemory_1;
      3'b010:
        casez_tmp = fifoMemory_2;
      3'b011:
        casez_tmp = fifoMemory_3;
      3'b100:
        casez_tmp = fifoMemory_4;
      3'b101:
        casez_tmp = fifoMemory_5;
      3'b110:
        casez_tmp = fifoMemory_6;
      default:
        casez_tmp = fifoMemory_7;
    endcase
  end // always_comb
  wire       _GEN = io_push & ~_io_full_output;
  always @(posedge clock) begin
    if (_GEN & head[2:0] == 3'h0)
      fifoMemory_0 <= io_dataIn;
    if (_GEN & head[2:0] == 3'h1)
      fifoMemory_1 <= io_dataIn;
    if (_GEN & head[2:0] == 3'h2)
      fifoMemory_2 <= io_dataIn;
    if (_GEN & head[2:0] == 3'h3)
      fifoMemory_3 <= io_dataIn;
    if (_GEN & head[2:0] == 3'h4)
      fifoMemory_4 <= io_dataIn;
    if (_GEN & head[2:0] == 3'h5)
      fifoMemory_5 <= io_dataIn;
    if (_GEN & head[2:0] == 3'h6)
      fifoMemory_6 <= io_dataIn;
    if (_GEN & (&(head[2:0])))
      fifoMemory_7 <= io_dataIn;
    if (reset) begin
      tail <= 4'h0;
      head <= 4'h0;
      count <= 4'h0;
    end
    else begin
      if (io_pop & ~_io_empty_output)
        tail <= tail + 4'h1;
      if (_GEN)
        head <= head + 4'h1;
      if (~(io_pop & io_push)) begin
        if (io_pop)
          count <= count - 4'h1;
        else if (io_push)
          count <= count + 4'h1;
      end
    end
  end // always @(posedge)
  assign io_dataOut = casez_tmp;
  assign io_empty = _io_empty_output;
  assign io_full = _io_full_output;
  assign io_almostEmpty = count <= {1'h0, io_almostEmptyLevel};
  assign io_almostFull = count >= {1'h0, io_almostFullLevel};
  assign io_ramWriteEnable = io_push;
  assign io_ramWriteAddress = head[2:0];
  assign io_ramDataIn = io_dataIn;
  assign io_ramReadEnable = io_pop;
  assign io_ramReadAddress = tail[2:0];
endmodule

