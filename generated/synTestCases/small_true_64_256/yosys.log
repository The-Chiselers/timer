
-- Parsing `../../../syn/DynamicFifo.yo.tcl' using frontend `tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: DynamicFifo.sv
Parsing SystemVerilog input from `DynamicFifo.sv' to AST representation.
Generating RTLIL representation for module `\DynamicFifo'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \DynamicFifo

2.2. Analyzing design hierarchy..
Top module:  \DynamicFifo
Removed 0 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \DynamicFifo

3.1.2. Analyzing design hierarchy..
Top module:  \DynamicFifo
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$DynamicFifo.sv:28$3 in module DynamicFifo.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\DynamicFifo.$proc$DynamicFifo.sv:28$3'.
     1/3: $0\count[8:0]
     2/3: $0\head[8:0]
     3/3: $0\tail[8:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\DynamicFifo.\tail' using process `\DynamicFifo.$proc$DynamicFifo.sv:28$3'.
  created $dff cell `$procdff$36' with positive edge clock.
Creating register for signal `\DynamicFifo.\head' using process `\DynamicFifo.$proc$DynamicFifo.sv:28$3'.
  created $dff cell `$procdff$37' with positive edge clock.
Creating register for signal `\DynamicFifo.\count' using process `\DynamicFifo.$proc$DynamicFifo.sv:28$3'.
  created $dff cell `$procdff$38' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\DynamicFifo.$proc$DynamicFifo.sv:28$3'.
Removing empty process `DynamicFifo.$proc$DynamicFifo.sv:28$3'.
Cleaned up 6 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.
<suppressed ~2 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 1 unused cells and 16 unused wires.
<suppressed ~2 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module DynamicFifo..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DynamicFifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DynamicFifo.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 8 bits (of 9) from port B of cell DynamicFifo.$add$DynamicFifo.sv:36$6 ($add).
Removed top 8 bits (of 9) from port B of cell DynamicFifo.$add$DynamicFifo.sv:38$9 ($add).
Removed top 8 bits (of 9) from port B of cell DynamicFifo.$sub$DynamicFifo.sv:41$12 ($sub).
Removed top 8 bits (of 9) from port B of cell DynamicFifo.$add$DynamicFifo.sv:43$13 ($add).
Removed top 1 bits (of 9) from port B of cell DynamicFifo.$le$DynamicFifo.sv:50$14 ($le).
Removed top 1 bits (of 9) from port B of cell DynamicFifo.$ge$DynamicFifo.sv:51$15 ($ge).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~52 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module DynamicFifo:
  creating $macc model for $add$DynamicFifo.sv:36$6 ($add).
  creating $macc model for $add$DynamicFifo.sv:38$9 ($add).
  creating $macc model for $add$DynamicFifo.sv:43$13 ($add).
  creating $macc model for $sub$DynamicFifo.sv:41$12 ($sub).
  creating $alu model for $macc $sub$DynamicFifo.sv:41$12.
  creating $alu model for $macc $add$DynamicFifo.sv:43$13.
  creating $alu model for $macc $add$DynamicFifo.sv:38$9.
  creating $alu model for $macc $add$DynamicFifo.sv:36$6.
  creating $alu model for $ge$DynamicFifo.sv:51$15 ($ge): new $alu
  creating $alu model for $le$DynamicFifo.sv:50$14 ($le): new $alu
  creating $alu cell for $le$DynamicFifo.sv:50$14: $auto$alumacc.cc:474:replace_alu$41
  creating $alu cell for $ge$DynamicFifo.sv:51$15: $auto$alumacc.cc:474:replace_alu$54
  creating $alu cell for $add$DynamicFifo.sv:36$6: $auto$alumacc.cc:474:replace_alu$63
  creating $alu cell for $add$DynamicFifo.sv:38$9: $auto$alumacc.cc:474:replace_alu$66
  creating $alu cell for $add$DynamicFifo.sv:43$13: $auto$alumacc.cc:474:replace_alu$69
  creating $alu cell for $sub$DynamicFifo.sv:41$12: $auto$alumacc.cc:474:replace_alu$72
  created 6 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DynamicFifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DynamicFifo.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$52: { $auto$rtlil.cc:1832:Not$51 $auto$rtlil.cc:1835:ReduceAnd$45 }
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$61: { $auto$rtlil.cc:1832:Not$58 $auto$rtlil.cc:1835:ReduceAnd$60 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$44: { $auto$alumacc.cc:490:replace_alu$42 [0] $auto$alumacc.cc:490:replace_alu$42 [1] $auto$alumacc.cc:490:replace_alu$42 [2] $auto$alumacc.cc:490:replace_alu$42 [3] $auto$alumacc.cc:490:replace_alu$42 [4] $auto$alumacc.cc:490:replace_alu$42 [5] $auto$alumacc.cc:490:replace_alu$42 [6] $auto$alumacc.cc:490:replace_alu$42 [7] $auto$alumacc.cc:490:replace_alu$42 [8] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$59: { $auto$alumacc.cc:490:replace_alu$55 [0] $auto$alumacc.cc:490:replace_alu$55 [1] $auto$alumacc.cc:490:replace_alu$55 [2] $auto$alumacc.cc:490:replace_alu$55 [3] $auto$alumacc.cc:490:replace_alu$55 [4] $auto$alumacc.cc:490:replace_alu$55 [5] $auto$alumacc.cc:490:replace_alu$55 [6] $auto$alumacc.cc:490:replace_alu$55 [7] $auto$alumacc.cc:490:replace_alu$55 [8] }
  Optimizing cells in module \DynamicFifo.
Performed a total of 4 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DynamicFifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DynamicFifo.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \DynamicFifo..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \DynamicFifo.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=1\Y_WIDTH=9 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=9 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~415 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.
<suppressed ~207 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
<suppressed ~81 debug messages>
Removed a total of 27 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 71 unused cells and 230 unused wires.
<suppressed ~72 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\DynamicFifo' to `<abc-temp-dir>/input.blif'..
Extracted 279 gates and 325 wires to a netlist network with 44 inputs and 29 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        6
ABC RESULTS:            ANDNOT cells:       56
ABC RESULTS:              AOI3 cells:        9
ABC RESULTS:               MUX cells:       40
ABC RESULTS:              NAND cells:        8
ABC RESULTS:               NOR cells:        7
ABC RESULTS:               NOT cells:       28
ABC RESULTS:              OAI3 cells:        9
ABC RESULTS:              OAI4 cells:        1
ABC RESULTS:                OR cells:       25
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:               XOR cells:       42
ABC RESULTS:        internal signals:      252
ABC RESULTS:           input signals:       44
ABC RESULTS:          output signals:       29
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module DynamicFifo.
<suppressed ~16 debug messages>

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\DynamicFifo'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 0 unused cells and 176 unused wires.
<suppressed ~1 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \DynamicFifo

3.25.2. Analyzing design hierarchy..
Top module:  \DynamicFifo
Removed 0 unused modules.

3.26. Printing statistics.

=== DynamicFifo ===

   Number of wires:                243
   Number of wire bits:            571
   Number of public wires:          23
   Number of public wire bits:     327
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                271
     $_ANDNOT_                      56
     $_AND_                          6
     $_AOI3_                         9
     $_DFF_P_                       25
     $_MUX_                         40
     $_NAND_                         8
     $_NOR_                          6
     $_NOT_                         28
     $_OAI3_                         9
     $_OAI4_                         1
     $_ORNOT_                       12
     $_OR_                          23
     $_XNOR_                         6
     $_XOR_                         42

3.27. Executing CHECK pass (checking for obvious problems).
checking module DynamicFifo..
found and reported 0 problems.

4. Executing FLATTEN pass (flatten design).
No more expansions possible.

5. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  create mapping for $_DFF_PP0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_PP1_ from mapping for $_DFF_PN1_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFF_N_ from mapping for $_DFF_P_.
  create mapping for $_DFF_NN0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_NP0_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NN1_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NP1_ from mapping for $_DFF_NN1_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  final dff cell mappings:
    DFF_X1 _DFF_N_ (.CK(~C), .D( D), .Q( Q), .QN(~Q));
    DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    DFFR_X1 _DFF_NN0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFR_X1 _DFF_NN1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN( R));
    DFFR_X1 _DFF_NP0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFR_X1 _DFF_NP1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN(~R));
    DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    DFFR_X1 _DFF_PP0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFS_X1 _DFF_PP1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN(~R));
    DFFRS_X1 _DFFSR_NNN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_NNP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_NPN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_NPP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
    DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_PNP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_PPN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_PPP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
Mapping DFF cells in module `\DynamicFifo':
  mapped 25 $_DFF_P_ cells to \DFF_X1 cells.

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\DynamicFifo' to `<abc-temp-dir>/input.blif'..
Extracted 246 gates and 313 wires to a netlist network with 67 inputs and 29 outputs.

6.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/system76/drive/projects/chiselWare/dynamicfifo/generated/synTestCases/small_true_64_256/../../../syn/stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "WELLTAP_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/home/system76/drive/projects/chiselWare/dynamicfifo/generated/synTestCases/small_true_64_256/../../../syn/stdcells.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 10 dont_use).  Time =     0.06 sec
ABC: Memory =    8.88 MB. Time =     0.06 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X1 cells:        7
ABC RESULTS:           AND4_X1 cells:        3
ABC RESULTS:         AOI211_X1 cells:        8
ABC RESULTS:          AOI21_X1 cells:       20
ABC RESULTS:         AOI221_X1 cells:        1
ABC RESULTS:         AOI222_X1 cells:        1
ABC RESULTS:          AOI22_X1 cells:        7
ABC RESULTS:            INV_X1 cells:       31
ABC RESULTS:          NAND2_X1 cells:        6
ABC RESULTS:          NAND3_X1 cells:        6
ABC RESULTS:           NOR2_X1 cells:       17
ABC RESULTS:           NOR3_X1 cells:        8
ABC RESULTS:           NOR4_X1 cells:        2
ABC RESULTS:         OAI211_X1 cells:        2
ABC RESULTS:          OAI21_X1 cells:       16
ABC RESULTS:         OAI221_X1 cells:        1
ABC RESULTS:         OAI222_X1 cells:        1
ABC RESULTS:          OAI22_X1 cells:        7
ABC RESULTS:            OR2_X1 cells:        4
ABC RESULTS:            OR3_X1 cells:        2
ABC RESULTS:            OR4_X1 cells:        2
ABC RESULTS:          XNOR2_X1 cells:        7
ABC RESULTS:           XOR2_X1 cells:        5
ABC RESULTS:        internal signals:      217
ABC RESULTS:           input signals:       67
ABC RESULTS:          output signals:       29
Removing temp directory.

7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DynamicFifo..
Removed 0 unused cells and 340 unused wires.
<suppressed ~5 debug messages>

8. Executing Verilog backend.
Dumping module `\DynamicFifo'.

9. Printing statistics.

=== DynamicFifo ===

   Number of wires:                182
   Number of wire bits:            494
   Number of public wires:          19
   Number of public wire bits:     307
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                189
     AND2_X1                         7
     AND4_X1                         3
     AOI211_X1                       8
     AOI21_X1                       20
     AOI221_X1                       1
     AOI222_X1                       1
     AOI22_X1                        7
     DFF_X1                         25
     INV_X1                         31
     NAND2_X1                        6
     NAND3_X1                        6
     NOR2_X1                        17
     NOR3_X1                         8
     NOR4_X1                         2
     OAI211_X1                       2
     OAI21_X1                       16
     OAI221_X1                       1
     OAI222_X1                       1
     OAI22_X1                        7
     OR2_X1                          4
     OR3_X1                          2
     OR4_X1                          2
     XNOR2_X1                        7
     XOR2_X1                         5

   Chip area for module '\DynamicFifo': 284.620000

Warnings: 8 unique messages, 72 total
End of script. Logfile hash: e7a3f3945c
CPU: user 0.30s system 0.02s, MEM: 40.39 MB total, 30.46 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 23% 2x stat (0 sec), 22% 1x dfflibmap (0 sec), ...
